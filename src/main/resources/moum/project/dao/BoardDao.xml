<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="moum.project.dao.BoardDao">

    <!-- BoardMap: Board 객체와 매핑 -->
    <resultMap id="BoardMap" type="moum.project.vo.Board">
        <id column="board_id" property="no"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="user_id" property="userNo"/>
        <result column="post_date" property="postDate"/>
        <result column="view_count" property="viewCount"/>
        <result column="is_public" property="isPublic"/>
        <result column="is_deleted" property="isDeleted"/>

        <result column="price" property="price"/>
        <result column="status" property="status"/>

        <association property="collection" javaType="moum.project.vo.Collection">
            <id column="collection_id" property="collection"/>
            <result column="name" property="name"/>
        </association>
    </resultMap>

    <!-- 모든 게시글 조회 (list) -->
    <select id="list" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        tb.collection_id,
        tb.price,
        tb.status
        FROM
        board b
        left join trade_board tb on b.board_id = tb.board_id
        WHERE
        b.is_deleted = 0
        ORDER BY
        b.post_date DESC
    </select>

    <select id="selectById" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        tb.collection_id,
        tb.price,
        tb.status
        FROM
        board b
        left join trade_board tb on b.board_id = tb.board_id
        WHERE
        b.board_id = #{boardId} AND b.is_deleted = 0
    </select>


    <!-- 새 게시글 생성 (insert) -->
    <insert id="insert" parameterType="moum.project.vo.Board" useGeneratedKeys="true" keyProperty="no" keyColumn="board_id">
        INSERT INTO board (
        title,
        content,
        user_id,
        post_date,
        board_type,
        collection
        <!-- 필요한 다른 필드 추가 -->
        )
        VALUES (
        #{title},
        #{content},
        #{userNo},
        NOW(),
        #{boardType},
        #{collection.no}
        <!-- 필요한 다른 필드 매핑 -->
        )
    </insert>


    <!-- 게시글 수정 (update) -->
    <update id="update" parameterType="moum.project.vo.Board">
        UPDATE board
        SET
        title = #{title},
        content = #{content},
        view_count = #{viewCount},
        is_public = #{isPublic}
        WHERE
        board_id = #{no}
    </update>

    <!-- 논리적 삭제 (delete) -->
    <update id="delete" parameterType="int">
        UPDATE board
        SET is_deleted = 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 조회수 증가 (increaseViewCount) -->
    <update id="increaseViewCount" parameterType="int">
        UPDATE board
        SET view_count = view_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 특정 사용자의 게시글 조회 (selectByUserId) -->
    <select id="selectByUserId" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        tb.collection_id,
        tb.price,
        tb.status
        FROM
        board b
        left join trade_board tb on b.board_id = tb.board_id
        WHERE
        b.user_id = #{userId} AND b.is_deleted = 0
    </select>

    <!-- 최근 게시글 조회 (selectRecent) -->
    <select id="selectRecent" resultMap="BoardMap" parameterType="int">
        SELECT
        board_id,
        title,
        content,
        user_id,
        post_date,
        view_count,
        is_public,
        is_deleted
        FROM
        board
        WHERE
        is_deleted = 0
        ORDER BY
        post_date DESC
        LIMIT #{limit}
    </select>


    <!-- 모든 게시글 조회 (listAll) -->
    <select id="listAll" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted
        FROM
        board b
        WHERE
        b.is_deleted = 0
        ORDER BY
        b.post_date DESC
    </select>

    <!-- 인기 게시글 조회 (listPopular) -->
    <select id="listPopular" resultMap="BoardMap">
        <!-- 조회수 1000 이상이며 지난 1시간 이내에 작성된 게시글 -->
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted
        FROM
        board b
        WHERE
        b.is_deleted = 0
        AND b.view_count >= 1000
        AND b.post_date >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
        ORDER BY
        b.view_count DESC
    </select>

    <!-- 수집품 거래 게시글 조회 (listTradePosts) -->
    <select id="listTradePosts" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.user_id,
        b.post_date,
        b.view_count,
        tb.price,
        tb.status,
        c.collection_id,
        c.name AS collection_name
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        INNER JOIN collection c ON tb.collection_id = c.collection_id
        WHERE
        b.is_deleted = 0
        ORDER BY
        b.post_date DESC
        LIMIT #{limit}
    </select>


    <!-- 자랑하기 게시글 조회 (listBraggingPosts) -->
    <select id="listBraggingPosts" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        bp.price,
        bp.collection_id
        FROM
        board b
        INNER JOIN bragging_board bp ON b.board_id = bp.board_id
        WHERE
        b.is_deleted = 0
        ORDER BY
        b.post_date DESC
    </select>

</mapper>
