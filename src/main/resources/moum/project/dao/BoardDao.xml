<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="moum.project.dao.BoardDao">

    <!-- BoardMap: Board 객체와 매핑 -->
    <resultMap id="BoardMap" type="moum.project.vo.Board">
        <!-- 게시글 기본 정보 매핑 -->
        <id column="board_id" property="no"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="user_id" property="userNo"/>
        <result column="post_date" property="postDate"/>
        <result column="view_count" property="viewCount"/>
        <result column="is_public" property="isPublic"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="board_type" property="boardType"/>
        <result column="price" property="price"/>
        <result column="status" property="status"/>

        <association property="collection" javaType="moum.project.vo.Collection">
            <id column="collection_id" property="no"/>
            <result column="collection_name" property="name"/>
        </association>

        <association property="collectionStatus" javaType="moum.project.vo.CollectionStatus">
            <id column="status_id" property="no"/>
            <result column="status_name" property="name"/>
        </association>

        <association property="user" javaType="moum.project.vo.User">
            <id column="writer_id" property="no"/>
            <result column="nickname" property="nickname"/>
            <result column="end_date" property="endDate"/>
        </association>

        <!-- attachedFiles 매핑 수정 -->
        <collection property="attachedFiles" ofType="moum.project.vo.AttachedFile">
            <id column="photo_id" property="no"/>
            <result column="board_id" property="boardNo"/>
            <result column="filename" property="filename"/>
            <result column="origin_filename" property="originFilename"/>
        </collection>
    </resultMap>

    <!-- 게시글 목록 조회 -->
    <select id="list" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        tb.price,
        tb.status,
        c.collection_id,
        c.name AS collection_name,
        bp.photo_id,
        bp.board_id AS bp_board_id,
        bp.filename,
        bp.origin_filename
        FROM
        board b
        LEFT JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        WHERE
        b.is_deleted = 0
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="selectById" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        b.board_type,
        tb.collection_id,
        tb.price,
        tb.status,
        c.name AS collection_name,
        bp.photo_id,
        bp.board_id AS bp_board_id,
        bp.filename,
        bp.origin_filename
        FROM
        board b
        LEFT JOIN trade_board tb ON b.board_id = tb.board_id
        LEFT JOIN collection c ON tb.collection_id = c.collection_id
        LEFT JOIN board_photo bp ON b.board_id = bp.board_id
        WHERE
        b.board_id = #{no} AND b.is_deleted = 0
    </select>


    <insert id="insertAttachedFiles" parameterType="java.util.List">
        INSERT INTO board_photo (
        board_id,
        filename,
        origin_filename
        )
        VALUES
        <foreach collection="list" item="file" separator=",">
            (
            #{file.boardNo},
            #{file.filename},
            #{file.originFilename}
            )
        </foreach>
    </insert>

    <delete id="deleteAttachedFilesByBoardId" parameterType="int">
        DELETE FROM board_photo WHERE board_id = #{no}
    </delete>




    <!-- 새 게시글 생성 (insert) -->
    <insert id="insert" parameterType="moum.project.vo.Board" useGeneratedKeys="true" keyProperty="no" keyColumn="board_id">
        INSERT INTO board (
        title,
        content,
        user_id,
        post_date,
        board_type
        )
        VALUES (
        #{title},
        #{content},
        #{userNo},
        NOW(),
        #{boardType}
        )
    </insert>

    <insert id="boardInsert" parameterType="moum.project.vo.Board">
        INSERT INTO collection_board (
        board_id,
        collection_id
        )
        VALUES (
        #{no},
        #{collection.no}
        )
    </insert>


    <!-- 게시글 수정 (update) -->
    <update id="update" parameterType="moum.project.vo.Board">
        UPDATE board
        SET
        title = #{title},
        content = #{content},
        view_count = #{viewCount},
        is_public = #{isPublic}
        WHERE
        board_id = #{no}
    </update>

    <!-- 논리적 삭제 (delete) -->
    <update id="delete" parameterType="int">
        UPDATE board
        SET is_deleted = 1
        WHERE board_id = #{no}
    </update>


    <!-- 조회수 증가 (increaseViewCount) -->
    <update id="increaseViewCount" parameterType="int">
        UPDATE board
        SET view_count = view_count + 1
        WHERE board_id = #{no}
    </update>

    <select id="selectByUserId" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        tb.collection_id,
        tb.price,
        tb.status
        FROM
        board b
        LEFT JOIN trade_board tb ON b.board_id = tb.board_id
        WHERE
        b.user_id = #{userId} AND b.is_deleted = 0
    </select>


    <!-- 최근 게시글 조회 (selectRecent) -->
    <select id="selectRecent" resultMap="BoardMap" parameterType="int">
        SELECT
        board_id,
        title,
        content,
        user_id,
        post_date,
        view_count,
        is_public,
        is_deleted
        FROM
        board
        WHERE
        is_deleted = 0
        ORDER BY
        post_date DESC
        LIMIT #{no}
    </select>


    <!-- 모든 게시글 조회 (listAll) -->
    <select id="listAll" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted
        FROM
        board b
        WHERE
        b.is_deleted = 0
        ORDER BY
        b.post_date DESC
    </select>

    <!-- 인기 게시글 조회 (listPopular) -->
    <select id="listPopular" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted
        FROM
        board b
        WHERE
        b.is_deleted = 0
        AND b.view_count >= 1000
        AND b.post_date >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
        ORDER BY
        b.view_count DESC
    </select>

    <!-- 수집품 거래 게시글 조회 (listTradePosts) -->
    <select id="listTradePosts" resultMap="BoardMap" parameterType="int">
        SELECT
        b.board_id,
        b.title,
        b.user_id,
        b.post_date,
        b.view_count,
        tb.price,
        tb.status,
        c.collection_id,
        c.name AS collection_name
        FROM
        board b
        INNER JOIN trade_board tb ON b.board_id = tb.board_id
        INNER JOIN collection c ON tb.collection_id = c.collection_id
        WHERE
        b.is_deleted = 0
        ORDER BY
        b.post_date DESC
        LIMIT #{no}
    </select>


    <!-- 자랑하기 게시글 조회 (listBraggingPosts) -->
    <select id="listBraggingPosts" resultMap="BoardMap">
        SELECT
        b.board_id,
        b.title,
        b.content,
        b.user_id,
        b.post_date,
        b.view_count,
        b.is_public,
        b.is_deleted,
        bp.price,
        bp.collection_id
        FROM
        board b
        INNER JOIN bragging_board bp ON b.board_id = bp.board_id
        WHERE
        b.is_deleted = 0
        ORDER BY
        b.post_date DESC
    </select>

    <select id="listByPage" resultMap="BoardMap" parameterType="map">
        SELECT
            b.board_id,
            b.title,
            b.user_id,
            u.user_id as writer_id,
            u.nickname,
            u.end_date,
            b.post_date,
            b.view_count,
            b.is_public,
            b.is_deleted,
            b.board_type
        FROM
            board b
            left join user u on b.user_id = u.user_id
        WHERE
            b.is_deleted = 0
        ORDER BY
            b.board_id desc
        LIMIT #{pageNo}, #{pageCount}
    </select>

    <select id="count">
        select count(*)
        from board
        where is_deleted = 0
    </select>

</mapper>
